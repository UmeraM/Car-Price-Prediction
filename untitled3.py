# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13SnuuYW0gzt6_lTO6Rea8sATy2qiS0uh

Importing the dependencies
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

"""Data collection and processing"""

# loading the data from csv files to pandas dataframe
car_dataset = pd.read_csv('/content/car data.csv')

# inspecting the first five rows of the dataset
car_dataset.head()

#checking the number of rows and colums
car_dataset.shape

# getting some information about the dataset
car_dataset.info()

# checking the number of missing values
car_dataset.isnull().sum()

# checking the distribution of categorical data
print(car_dataset.Fuel_Type.value_counts())
print(car_dataset.Seller_Type.value_counts())
print(car_dataset.Transmission.value_counts())

"""Encoding the categorical data"""

#encoding "Fuel_Type" column
car_dataset.replace({'Fuel_Type':{'Petrol':0 , 'Diesel':1 , 'CNG':2}},inplace=True)
#encoding "Seller_Type" column
car_dataset.replace({'Seller_Type':{'Dealer':0 , 'Individual':1 }},inplace=True)
#encoding "Transmission" column
car_dataset.replace({'Transmission':{'Manual':0 ,'Automatic':1 , 'CNG':2}},inplace=True)

"""Splitting the data and target"""

X=car_dataset.drop(['Car_Name','Selling_Price'],axis=1)
Y=car_dataset['Selling_Price']

print(X)

print(Y)

"""Splitting Training and Testing Data"""

X_train , X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.1,random_state=2)

"""Model Training

1.Linear Regression
"""

lin_reg_model= LinearRegression()

lin_reg_model.fit(X_train,Y_train)

#prediction on training data
training_data_prediction=lin_reg_model.predict(X_train)

# R squared error
error_score= metrics.r2_score(Y_train,training_data_prediction)
print("R squared error : " ,error_score)

"""Visualize the actualprices and predict prices"""

plt.scatter(Y_train,training_data_prediction)
plt.xlabel("Actual price")
plt.ylabel("Predicted price")
plt.title("Actual price vs Predicted price")
plt.show()

#prediction on training data
test_data_prediction=lin_reg_model.predict(X_test)

# R squared error
error_score=metrics.r2_score(Y_test,test_data_prediction)
print("R squared error: " , error_score)

plt.scatter(Y_train,training_data_prediction)
plt.xlabel("Actual price")
plt.ylabel("Predicted price")
plt.title("Actual price vs Predicted price")
plt.show()

"""2. LassoRegression"""

lass_reg_model= Lasso()

lass_reg_model.fit(X_train,Y_train)

#prediction on training data
training_data_prediction=lin_reg_model.predict(X_train)

# R squared error
error_score= metrics.r2_score(Y_train,training_data_prediction)
print("R squared error : " ,error_score)

"""Visualize the actualprices and predict prices"""

plt.scatter(Y_train,training_data_prediction)
plt.xlabel("Actual price")
plt.ylabel("Predicted price")
plt.title("Actual price vs Predicted price")
plt.show()

#prediction on training data
test_data_prediction=lin_reg_model.predict(X_test)

# R squared error
error_score=metrics.r2_score(Y_test,test_data_prediction)
print("R squared error: " , error_score)

plt.scatter(Y_train,training_data_prediction)
plt.xlabel("Actual price")
plt.ylabel("Predicted price")
plt.title("Actual price vs Predicted price")
plt.show()